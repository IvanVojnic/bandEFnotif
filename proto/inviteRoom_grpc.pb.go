// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/inviteRoom.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InviteRoomClient is the client API for InviteRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteRoomClient interface {
	GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*GetInviteResponse, error)
	StorageInvite(ctx context.Context, in *StorageInviteRequest, opts ...grpc.CallOption) (*StorageInviteResponse, error)
}

type inviteRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteRoomClient(cc grpc.ClientConnInterface) InviteRoomClient {
	return &inviteRoomClient{cc}
}

func (c *inviteRoomClient) GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*GetInviteResponse, error) {
	out := new(GetInviteResponse)
	err := c.cc.Invoke(ctx, "/inviteRoom.inviteRoom/GetInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteRoomClient) StorageInvite(ctx context.Context, in *StorageInviteRequest, opts ...grpc.CallOption) (*StorageInviteResponse, error) {
	out := new(StorageInviteResponse)
	err := c.cc.Invoke(ctx, "/inviteRoom.inviteRoom/StorageInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteRoomServer is the server API for InviteRoom service.
// All implementations must embed UnimplementedInviteRoomServer
// for forward compatibility
type InviteRoomServer interface {
	GetInvite(context.Context, *GetInviteRequest) (*GetInviteResponse, error)
	StorageInvite(context.Context, *StorageInviteRequest) (*StorageInviteResponse, error)
	mustEmbedUnimplementedInviteRoomServer()
}

// UnimplementedInviteRoomServer must be embedded to have forward compatible implementations.
type UnimplementedInviteRoomServer struct {
}

func (UnimplementedInviteRoomServer) GetInvite(context.Context, *GetInviteRequest) (*GetInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvite not implemented")
}
func (UnimplementedInviteRoomServer) StorageInvite(context.Context, *StorageInviteRequest) (*StorageInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageInvite not implemented")
}
func (UnimplementedInviteRoomServer) mustEmbedUnimplementedInviteRoomServer() {}

// UnsafeInviteRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteRoomServer will
// result in compilation errors.
type UnsafeInviteRoomServer interface {
	mustEmbedUnimplementedInviteRoomServer()
}

func RegisterInviteRoomServer(s grpc.ServiceRegistrar, srv InviteRoomServer) {
	s.RegisterService(&InviteRoom_ServiceDesc, srv)
}

func _InviteRoom_GetInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteRoomServer).GetInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inviteRoom.inviteRoom/GetInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteRoomServer).GetInvite(ctx, req.(*GetInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteRoom_StorageInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteRoomServer).StorageInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inviteRoom.inviteRoom/StorageInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteRoomServer).StorageInvite(ctx, req.(*StorageInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InviteRoom_ServiceDesc is the grpc.ServiceDesc for InviteRoom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InviteRoom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inviteRoom.inviteRoom",
	HandlerType: (*InviteRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvite",
			Handler:    _InviteRoom_GetInvite_Handler,
		},
		{
			MethodName: "StorageInvite",
			Handler:    _InviteRoom_StorageInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inviteRoom.proto",
}
